/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.merann.practicaltask.rest.api;

import ru.merann.practicaltask.rest.model.Error;
import ru.merann.practicaltask.rest.model.OrderDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-06-21T13:42:46.222+03:00[Europe/Moscow]")

@Validated
@Api(value = "orders", description = "the orders API")
public interface OrdersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Create an order", nickname = "createOrder", notes = "", response = OrderDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created order", response = OrderDTO.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<OrderDTO> createOrder(@ApiParam(value = "Order to create" ,required=true )  @Valid @RequestBody OrderDTO orderDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"selectedOptions\" : [ {    \"name\" : \"name\",    \"id\" : 6  }, {    \"name\" : \"name\",    \"id\" : 6  } ],  \"model\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"id\" : 0,  \"brand\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"orderDate\" : \"orderDate\",  \"user\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"status\" : \"status\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Info for a specific order", nickname = "deleteOrder", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order updated"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteOrder(@ApiParam(value = "The id of the order to delete",required=true) @PathVariable("orderId") Long orderId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Info for a specific order", nickname = "getOrderById", notes = "", response = OrderDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Expected response to a valid request", response = OrderDTO.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrderDTO> getOrderById(@ApiParam(value = "The id of the order to retrieve",required=true) @PathVariable("orderId") Long orderId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"selectedOptions\" : [ {    \"name\" : \"name\",    \"id\" : 6  }, {    \"name\" : \"name\",    \"id\" : 6  } ],  \"model\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"id\" : 0,  \"brand\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"orderDate\" : \"orderDate\",  \"user\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"status\" : \"status\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "List all orders", nickname = "getOrders", notes = "", response = OrderDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Array of requested orders", response = OrderDTO.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<OrderDTO>> getOrders(@ApiParam(value = "User ID to filter") @Valid @RequestParam(value = "userId", required = false) Long userId,@ApiParam(value = "State to filter") @Valid @RequestParam(value = "state", required = false) String state) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"selectedOptions\" : [ {    \"name\" : \"name\",    \"id\" : 6  }, {    \"name\" : \"name\",    \"id\" : 6  } ],  \"model\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"id\" : 0,  \"brand\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"orderDate\" : \"orderDate\",  \"user\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"status\" : \"status\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update a specific order", nickname = "updateOrder", notes = "", response = OrderDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order updated", response = OrderDTO.class),
        @ApiResponse(code = 200, message = "unexpected error", response = Error.class) })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<OrderDTO> updateOrder(@ApiParam(value = "The id of the order to retrieve",required=true) @PathVariable("orderId") Long orderId,@ApiParam(value = "Order to update" ,required=true )  @Valid @RequestBody OrderDTO orderDTO) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"selectedOptions\" : [ {    \"name\" : \"name\",    \"id\" : 6  }, {    \"name\" : \"name\",    \"id\" : 6  } ],  \"model\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"id\" : 0,  \"brand\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"orderDate\" : \"orderDate\",  \"user\" : {    \"name\" : \"name\",    \"id\" : 6  },  \"status\" : \"status\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
